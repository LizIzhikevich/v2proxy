-------------------------------------------------------------------------------
PROGRAMMABLE POLICIES & SIGNALS
-------------------------------------------------------------------------------

# purpose: protect certain resources from being terminated by users
# other than owner (and organization)

define policy resource limitDestruction {

    if resource.owner != $user :

	if resource.key_name contains "my_life's_work": 

	    protect delete 

    else: 
	allow 

}

# purpose: do not allow any resources in the org to talk to 
# non-stanford domains
define policy resource informationFlow {

    if resource.host does not contain "www.stanford.edu/":
	protect all #do not allow GET, POST, etc. 

    else:
	allow
	

} 

#Is this a policy? its more like a signal...should probably differentiate?
# purpose: print out the commands needed to terminate all cloud resources of this
# particular app
# differentiates b/w user invoked and app invoked (potentially output of program)
# resources

define signal app cleanUp {

    for id in app.resourcelist:

	if app.resourceList[id].invoke_origin == app.owner: 
	    print "client invoked: "
	else:
	    print "app invoked: "

	print resource.terminate_command(id)
	

}

run {

    appliedPolicies = [ limitDestruction, informationFlow ] #add More
    appliedSignals = [ cleanUp ]

    ./proxy 

} &

-------------------------------------------------------------------------------
DEFINED OBBJECTS & FUNCTIONS
-------------------------------------------------------------------------------


protect( action ) {

    if this.action == action:
	return false
    else:
	return true   

}


# purpose: to keep track of resources and choose to deliver or block
define proxy request {

    resource_type = extractResourceType( request )  # e.g., ec2, s3, lambda

    action = resource_type.extractAction( request ) # e.g., invoke, terminate, delete

    resource = resource_type.assignResourceObject( action, request )

    # speculatively try out the action and see if proxy will approve it
    allowed = spec_apply( resource, action, this.app )


    if allowed:
	deliver 

    else:
	block
	send_response_back

} 

define proxy response {

    resource_type = extractResourceType( request )  # e.g., ec2, s3, lambda

    # assign response to a resource request 
    resource = resource_awaiting_pool[resource_type]
	
    # update the resource list if request succeeded 
    # implemented in resource class
    apply( resource, action, this.app )

}

# subroutine: speculatively try out the action and see if proxy will approve it
spec_apply( resource, action, app ) {

    for policy in appliedPolicies:

	if policy.invoke( resource, action, app ) != pass:
	    return false
    
    return true	    

}

define app * { # for all apps 

    resourceList = map < id, resource >
    owner = $user


}


-------------------------------------------------------------------------------
RESOURCE ABSTRACTION
-------------------------------------------------------------------------------

#the following are member fields and functions that children of the resource class
# (ec2, s3, etc) must implement, if they are not already defined in the resource
# class themselves 
#
# these member fields and functions are used to implement policies

resource {

    id = null
    key_name = null

    resource_list<id,resource>

    # a resource is 'dead' until actually invoked
    alive = false

    # return a command that defines how to terminate the particular resource
    terminate_command( this_id )

    # see where the request came from
    invoke_origin : client[ original_dest_addr ] 

    owner = $user

    # return the host in http request
    host: request['Host']

    # see if the httpMessage is reffering to this particular resource
    checkMatch( host )

    # figure out which action is in httpMessage
    extractAction( request )

    # depending upon the action in the http message, we will either
    # create an independent object that will keep track of its state
    # or assign the action to an already existing object
    assignResourceObject( action, request )

    # return a label if found in http_message
    label : request label ]


    # update the resource in the resource list
    apply( resource, action, this.app ) {

        switch( action ) {

	    INVOKE:
		# save mapping from resource-id to resource object itself
		app.resourceList[ resource[id] ] = resource 

		# consult the resource method itself in case more needs to be done
		# lambda: will set the resource to "delete" after a set time
		# ec2 + s3: dont do anything special
		resource.apply(action)
		
	    READ:
		#nothing needs to be done with the resource
		pass

	    DELETE:
		#remove mapping from resourceList
		#hypothetically can move to a "deleted" list to keep track
		resourceList.pop( resouce[id] )

	}

	
    }


    # add the resource to the list if it is an invoke
    assignResourceOject( action, id ) {

        switch( action ) {

	    INVOKE:
		    
		resource = resource( id )
	        resource_list[ id ].add( resource ) 
		return resource
		    
	    READ:
		return resource_list[ id ]

	    DELETE:
		return resource_list[ id ]


	}


    }  



    # definitions for S3 resource types 
    s3 {

	terminate_command( this_id ) : "aws s3api delete-bucket --bucket " + id

	# johnsmith.s3.amazonaws.com
	checkMatch( request_host ): return ( request_host[ request_host.find(‘.’): 
			request_host.find(‘amazonaws’)] == ‘s3’ )

	extractAction( request ) {
		switch ( request[type] ) {

			POST: return INVOKE
			PUT: return INVOKE
			DELETE: return DELETE
			GET: return READ
			default: UNDEFINED
			
		}                       
		
	}  


	assignResourceOject( action, request ) {

	    id = request[ Bucket ] + request[ Key ]

	    resource = super.assignResourceOject( action, id )
	    
	    return resource
	}


    }

    # definitions for EC2 resource types 
    ec2 {

	terminate_command( this_id ): "aws ec2 terminate-instances --instance-ids " + this_id

	# ec2.us-east-1.amazonaws.com
	checkMatch( request_host ): return ( request_host[ 0:request_host.find('.') ] == ‘ec2’ )

	extractAction( request ) {
		switch ( request[‘Action’] ) {

			RunInstances : return INVOKE
			TerminateInstances : return DELETE
			default: UNDEFINED

		}		
	}


	assignResourceOject( action, request ) {

	    # TODO:use request[signature] until the response comes back
	    # with instance id
	    id : request[ instanceID ] 

	    resource = super.assignResourceOject( action, id )
	    
	    return resource
	}

	key_name = request['KeyName']


	

    }
    
    # definitions for lambda resource types 
    lambda {

	terminate_command( this_id ): "there is no command to terminate a lambda"

	# lambda.us-east-1.amazonaws.com
	checkMatch( request_host ): return ( request_host[ 0:request_host.find('.') ] == ‘lambda’ )

	extractAction( request ) {
		switch ( request[type] ) {

			POST : return INVOKE
			default: UNDEFINED

		}		
	}

	assignResourceOject( action, request ) {

	    # TODO: Not clear what to fill in here temporarily since instanceID doesnt exist
	    # until we parse the response...
	    id : http_message[ requestID ]

	    resource = super.assignResourceOject( action, id )
	    
	    return resource
	}


	# when a lambda in particular gets invoked, take the following special additional steps
	apply( action ) {
	    switch ( action ) {

		# set a default expiration time of 5 min to remove this resource
		# from resource list
		#
		# in general can do something fancier to figure out the true 
		# expiration time of the lamdbda
		INVOKE:
		    in 5 minutes from invoke time:
			resource_list[ id ].remove( resource ) 
		    
		default:

	    }


	}



    }

}

-------------------------------------------------------------------------------
Side Notes
-------------------------------------------------------------------------------

+ to make sure user restrictions don't override org ones, first apply user ones and then have org ones overwrite any that user might have written (aka org restrictions applied last with sudo permissions )

+ If we keep the following abstraction, does anyone have any clever ideas about how we should go about defining
what an "app" is? So far "apps" can hypothetically be defined by a user label or the user itself...
